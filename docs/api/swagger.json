{
  "openapi": "3.1.0",
  "info": {
    "title": "KitaBantu Backend Mobile API",
    "description": "This project is a backend API for an ecommerce-like application built with PHP (Laravel). It provides user authentication using JWT and custom tokens, order management, real-time chat via WebSocket, payment integration using Midtrans, and message delivery between services using RabbitMQ.",
    "version": "1.0.0",
    "contact": {
      "name": "Developer",
      "email": "azzam.sykir.work@gmail.com"
    }
  },
  "externalDocs": {
    "description": "GitHub Repository",
    "url": "https://github.com/AzzamSyakir/go-micro-services"
  },
  "servers": [
    {
      "url": "http://localhost:8000/",
      "description": "Local server"
    },
    {
      "url": "https://localhost:8000/",
      "description": "HTTPS Local server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your bearer token in the format **Bearer <token>**"
      }
    },
    "schemas": {
      "SignUpRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "example.user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User's password",
            "example": "strongpassword123"
          },
          "full_name": {
            "type": "string",
            "description": "User's full name",
            "example": "John Doe"
          },
          "phone_number": {
            "type": "string",
            "description": "User's phone number",
            "example": "081234567890"
          },
          "nick_name": {
            "type": "string",
            "description": "User's nickname",
            "example": "JONE"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "other"
            ],
            "description": "User's gender",
            "example": "male"
          },
          "villageId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user's village",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "preferred_service": {
            "type": "string",
            "description": "User's preferred service",
            "example": "translator"
          },
          "profile_photo": {
            "type": "string",
            "format": "binary",
            "description": "Profile photo (optional)."
          }
        },
        "required": [
          "email",
          "password",
          "full_name",
          "phone_number",
          "nick_name",
          "gender",
          "villageId",
          "preferred_service"
        ]
      },
      "SignInRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "example.user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "examplePassword123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "UpdatePasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "azzamsykir@gmail.com"
          },
          "old_password": {
            "type": "string",
            "format": "password",
            "example": "strongpassword123"
          },
          "new_password": {
            "type": "string",
            "format": "password",
            "example": "strongpassword123"
          }
        },
        "required": [
          "email",
          "old_password",
          "new_password"
        ]
      },
      "SignUpSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "SignUp succeeded."
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "profile": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "user_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "nick_name": {
                    "type": "string"
                  },
                  "gender": {
                    "type": "string"
                  },
                  "domicile": {
                    "type": "string"
                  },
                  "preferred_service": {
                    "type": "string"
                  },
                  "picture_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 201
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Bad request."
          },
          "data": {
            "type": "object",
            "properties": {
              "errors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "nullable": true
          },
          "status_code": {
            "type": "integer",
            "example": 400
          }
        }
      },
      "SignInSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "SignIn succeeded"
          },
          "data": {
            "type": "object",
            "properties": {
              "access_token": {
                "type": "string"
              },
              "refresh_token": {
                "type": "string"
              },
              "token_type": {
                "type": "string"
              },
              "expires_in": {
                "type": "integer"
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 200
          }
        }
      },
      "SignOutSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "SignOut successful. Token invalidated and refresh token removed"
          },
          "data": {
            "type": "null"
          },
          "status_code": {
            "type": "integer",
            "example": 200
          }
        }
      },
      "GenerateAccessTokenSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Access token generated successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "access_token": {
                "type": "string"
              },
              "token_type": {
                "type": "string"
              },
              "expires_in": {
                "type": "integer"
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 200
          }
        }
      },
      "GenerateRefreshTokenSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Token refreshed successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "access_token": {
                "type": "string"
              },
              "refresh_token": {
                "type": "string"
              },
              "token_type": {
                "type": "string"
              },
              "expires_in": {
                "type": "integer"
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 200
          }
        }
      },
      "UpdatePasswordSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Password updated successfully"
          },
          "data": {
            "type": "null"
          },
          "status_code": {
            "type": "integer",
            "example": 200
          }
        }
      },
      "DomicileSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Successfully retrieved full domicile address"
          },
          "data": {
            "type": "object",
            "properties": {
              "province": {
                "type": "string"
              },
              "regency": {
                "type": "string"
              },
              "district": {
                "type": "string"
              },
              "village": {
                "type": "string"
              },
              "full_address": {
                "type": "string"
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 200
          }
        }
      },
      "VillageListResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Successfully retrieved list of villages"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "district_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 200
          }
        }
      },
      "DistrictListResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Successfully retrieved list of districts"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "regency_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 200
          }
        }
      },
      "RegencyListResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Successfully retrieved list of regencies"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "province_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 200
          }
        }
      },
      "ProvinceListResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Successfully retrieved list of provinces"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 200
          }
        }
      },
      "OrderCreationRequest": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the client placing the order",
            "example": "39632c89-5bf6-4f19-908b-f43cdd61fdba"
          },
          "freelancer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the freelancer for the order",
            "example": "f963b760-d38d-47f6-b1db-6811118f83ef"
          },
          "work_location": {
            "type": "string",
            "description": "Full address of the work location",
            "example": "PONDOK JAGUNG TIMUR, SERPONG UTARA, KOTA TANGERANG SELATAN, BANTEN"
          },
          "work_start_time": {
            "type": "string",
            "format": "date-time",
            "description": "Start time of the work",
            "example": "2025-05-06T05:00:00Z"
          },
          "work_end_time": {
            "type": "string",
            "format": "date-time",
            "description": "End time of the work",
            "example": "2025-05-06T20:00:00Z"
          },
          "estimated_travel_time": {
            "type": "integer",
            "description": "Estimated travel time in hours",
            "example": 2
          },
          "hourly_rate": {
            "type": "number",
            "format": "float",
            "description": "Hourly rate of the freelancer",
            "example": 50000.00
          },
          "total_cost": {
            "type": "number",
            "format": "float",
            "description": "Total cost of the order",
            "example": 751666.67
          }
        },
        "required": [
          "client_id",
          "freelancer_id",
          "work_location",
          "work_start_time",
          "work_end_time",
          "estimated_travel_time",
          "hourly_rate",
          "total_cost"
        ]
      },
      "OrderCreationSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Order created successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "client_id": {
                "type": "string",
                "format": "uuid"
              },
              "freelancer_id": {
                "type": "string",
                "format": "uuid"
              },
              "work_location": {
                "type": "string"
              },
              "work_start_time": {
                "type": "string",
                "format": "date-time"
              },
              "work_end_time": {
                "type": "string",
                "format": "date-time"
              },
              "estimated_travel_time": {
                "type": "string"
              },
              "hourly_rate": {
                "type": "string"
              },
              "total_cost": {
                "type": "string"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "freelancer": {
                "type": "object",
                "nullable": true
              },
              "client": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "auth_method": {
                    "type": "string"
                  },
                  "email_verified": {
                    "type": "integer"
                  },
                  "email_verified_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 201
          }
        }
      },
      "CreateReviewRequest": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the order being reviewed",
            "example": "791e9bc6-8d90-4b72-afc5-e9875af19998"
          },
          "rating_star": {
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "description": "Star rating for the review (1-5)",
            "example": 5
          },
          "rating_text": {
            "type": "string",
            "description": "Text content of the review",
            "example": "ok bagus"
          },
          "review_file": {
            "type": "string",
            "format": "binary",
            "description": "Optional file attached to the review (e.g., an image)"
          }
        },
        "required": [
          "order_id",
          "rating_star",
          "rating_text"
        ]
      },
      "CreateReviewSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Review has been successfully created."
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "order_id": {
                "type": "string",
                "format": "uuid"
              },
              "rating_star": {
                "type": "integer"
              },
              "rating_text": {
                "type": "string"
              },
              "review_file_url": {
                "type": "string",
                "format": "uri"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 201
          }
        }
      },
      "GetReviewsByClientSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Reviews retrieved successfully."
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "order_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "rating_star": {
                  "type": "integer"
                },
                "rating_text": {
                  "type": "string"
                },
                "review_file_url": {
                  "type": "string",
                  "format": "uri"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "status_code": {
            "type": "integer",
            "example": 200
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Endpoints related to user authentication, including sign-up, sign-in, token generation, validation, and management."
    },
    {
      "name": "Domicile",
      "description": "Endpoints providing hierarchical domicile data across Indonesia (province to village). Used in user registration and service-related processes to ensure precise location selection."
    },
    {
      "name": "Orders",
      "description": "Endpoints related to order management, including orders, handling reviews, complaints, and negotiations."
    },
    {
      "name": "Chats",
      "description": "Endpoints that provide chat functionalities, including sending and retrieving messages. Messages are sent via HTTP but delivered in real-time through WebSocket. Chat history can be fetched using standard GET requests."
    },
    {
      "name": "Payments",
      "description": "Endpoints for managing payments. Supports four payment categories: Bank Transfer, E-Wallet, Card (Credit/Debit), and Over the Counter."
    }
  ],
  "paths": {
    "/api/auths/SignUp": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Registers a new user.",
        "operationId": "registerUser",
        "description": "Registers a new user. Email will not be delivered yet as the service is using sandbox SMTP.\nSee email example: \"emailExampleLink\"",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths/SignIn": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User Authentication",
        "operationId": "SignInUser",
        "description": "Authenticates the user and returns an access token (5-minute expiry) along with a refresh token that has a longer expiration period.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SignIn successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignInSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths/SignOut": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Signout",
        "operationId": "SignoutUser",
        "description": "Signs out the current user by deleting the stored refresh token in Redis and invalidating the JWT access token.",
        "responses": {
          "200": {
            "description": "Signout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignOutSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/auths/generate-access-token": {
      "patch": {
        "tags": [
          "Authentication"
        ],
        "summary": "Generate a new access token",
        "operationId": "GenerateNewAccessToken",
        "description": "This endpoint is locked. You must provide a refresh token in the Authorization header (i.e., replace your typical access token with your refresh token) to generate a new access token. Access token can be used to access other protected endpoints.",
        "responses": {
          "200": {
            "description": "Access token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateAccessTokenSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/auths/generate-refresh-token": {
      "patch": {
        "tags": [
          "Authentication"
        ],
        "summary": "Generate Refresh Token",
        "operationId": "GenerateRefreshToken",
        "description": "This endpoint generates a new Access Token and Refresh Token for the user. It is typically consumed automatically or on a scheduled basis to ensure the user remains signed in to the application. The Refresh Token is used only to generate a new Access Token and to access this endpoint, and cannot be used to access other protected endpoints. It is designed to have a longer expiry than the Access Token.",
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateRefreshTokenSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/auths/forgot-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update Password",
        "operationId": "UpdatePassword",
        "description": "This endpoint updates the user's password stored in the database. It uses a basic password matching mechanism for authentication — the user must provide their current password to confirm identity before updating to a new one.",
        "requestBody": {
          "description": "User credentials for updating password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePasswordSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/regions/domicile/{villageId}": {
      "get": {
        "tags": [
          "Domicile"
        ],
        "summary": "Get full domicile string by village ID",
        "operationId": "getDomicileByVillageId",
        "description": "Returns a full string of domicile (village, district, regency, province) based on the provided village ID.",
        "parameters": [
          {
            "name": "villageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Village ID",
            "example": "3674070004"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved full domicile address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomicileSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/regions/villages/{districtId}": {
      "get": {
        "tags": [
          "Domicile"
        ],
        "summary": "Get list of villages by district ID",
        "operationId": "getVillagesByDistrictId",
        "description": "Returns a list of villages within the specified district.",
        "parameters": [
          {
            "name": "districtId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "District ID",
            "example": "3674070"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of villages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VillageListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/regions/districts/{regencyId}": {
      "get": {
        "tags": [
          "Domicile"
        ],
        "summary": "Get list of districts by regency ID",
        "operationId": "getDistrictsByRegencyId",
        "description": "Returns a list of districts within the specified regency.",
        "parameters": [
          {
            "name": "regencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Regency ID",
            "example": "3674"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of districts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistrictListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/regions/regencies/{provinceId}": {
      "get": {
        "tags": [
          "Domicile"
        ],
        "summary": "Get list of regencies by province ID",
        "operationId": "getRegenciesByProvinceId",
        "description": "Returns a list of regencies within the specified province.",
        "parameters": [
          {
            "name": "provinceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Province ID",
            "example": "36"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of regencies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegencyListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/regions/provinces": {
      "get": {
        "tags": [
          "Domicile"
        ],
        "summary": "Get all provinces",
        "operationId": "getAllProvinces",
        "description": "Returns a list of all provinces in the system.",
        "responses": {
          "200": {
            "description": "Successfully retrieved list of provinces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvinceListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new order",
        "operationId": "CreateOrder",
        "description": "create an order for a freelancer. Also triggers a RabbitMQ message to sync data between client and freelancer databases",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreationSuccessResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/orders/reviews": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new review",
        "operationId": "CreateReview",
        "description": "Submits a review for an order by a client.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateReviewSuccessResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/orders/reviews/client": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get reviews by client ID",
        "operationId": "GetReviewByClientId",
        "description": "Returns a list of reviews created by the client.",
        "responses": {
          "200": {
            "description": "Reviews retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReviewsByClientSuccessResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  }
}